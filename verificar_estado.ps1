# üîç Script para verificar el estado del ODR Chatbot MVP

Write-Host "üîç Verificando estado del ODR Chatbot MVP..." -ForegroundColor Green
Write-Host "=============================================" -ForegroundColor Cyan

# Verificar Docker
Write-Host "üìã Verificando Docker..." -ForegroundColor Yellow
try {
    $dockerVersion = docker --version
    Write-Host "‚úÖ Docker: $dockerVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker no est√° disponible" -ForegroundColor Red
    exit 1
}

# Verificar contenedores
Write-Host "üìã Verificando contenedores..." -ForegroundColor Yellow
try {
    $containers = docker compose ps
    Write-Host "üìä Estado de contenedores:" -ForegroundColor Cyan
    Write-Host $containers -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Error al verificar contenedores" -ForegroundColor Red
}

# Verificar puertos
Write-Host "üìã Verificando puertos..." -ForegroundColor Yellow

$ports = @(
    @{Port = 3000; Service = "Web UI"},
    @{Port = 5000; Service = "API"},
    @{Port = 5432; Service = "PostgreSQL"},
    @{Port = 8080; Service = "TEI"},
    @{Port = 8081; Service = "LLaMA"}
)

foreach ($port in $ports) {
    try {
        $connection = Test-NetConnection -ComputerName localhost -Port $port.Port -InformationLevel Quiet
        if ($connection) {
            Write-Host "‚úÖ Puerto $($port.Port) ($($port.Service)): Abierto" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Puerto $($port.Port) ($($port.Service)): Cerrado" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå Puerto $($port.Port) ($($port.Service)): Error al verificar" -ForegroundColor Red
    }
}

# Verificar servicios web
Write-Host "üìã Verificando servicios web..." -ForegroundColor Yellow

# API Health
try {
    $apiResponse = Invoke-WebRequest -Uri "http://localhost:5000/health" -UseBasicParsing -TimeoutSec 5
    if ($apiResponse.StatusCode -eq 200) {
        Write-Host "‚úÖ API Health: Funcionando" -ForegroundColor Green
        Write-Host "   Respuesta: $($apiResponse.Content)" -ForegroundColor Gray
    } else {
        Write-Host "‚ö†Ô∏è  API Health: C√≥digo $($apiResponse.StatusCode)" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå API Health: No responde" -ForegroundColor Red
}

# Web UI
try {
    $webResponse = Invoke-WebRequest -Uri "http://localhost:3000" -UseBasicParsing -TimeoutSec 5
    if ($webResponse.StatusCode -eq 200) {
        Write-Host "‚úÖ Web UI: Funcionando" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Web UI: C√≥digo $($webResponse.StatusCode)" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Web UI: No responde" -ForegroundColor Red
}

# Verificar modelo
Write-Host "üìã Verificando modelo..." -ForegroundColor Yellow
$modelPath = "models/phi-2.Q4_K_M.gguf"
if (Test-Path $modelPath) {
    $modelSize = (Get-Item $modelPath).Length / 1GB
    Write-Host "‚úÖ Modelo encontrado: $modelPath" -ForegroundColor Green
    Write-Host "   Tama√±o: $([math]::Round($modelSize, 2)) GB" -ForegroundColor Gray
} else {
    Write-Host "‚ö†Ô∏è  Modelo no encontrado: $modelPath" -ForegroundColor Yellow
    Write-Host "   El sistema funcionar√° sin LLM" -ForegroundColor Cyan
}

# Verificar archivos de configuraci√≥n
Write-Host "üìã Verificando configuraci√≥n..." -ForegroundColor Yellow
$configFiles = @(".env", "docker-compose.yml", "services/api/main.py", "web/index.html")
foreach ($file in $configFiles) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $file: Existe" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $file: No existe" -ForegroundColor Red
    }
}

# Mostrar logs recientes
Write-Host "üìã Logs recientes (√∫ltimas 10 l√≠neas)..." -ForegroundColor Yellow
try {
    $logs = docker compose logs --tail=10
    Write-Host "üìÑ Logs recientes:" -ForegroundColor Cyan
    Write-Host $logs -ForegroundColor Gray
} catch {
    Write-Host "‚ö†Ô∏è  No se pudieron obtener logs" -ForegroundColor Yellow
}

Write-Host "=============================================" -ForegroundColor Cyan
Write-Host "üéØ Resumen de verificaci√≥n completado" -ForegroundColor Green
Write-Host "=============================================" -ForegroundColor Cyan

Write-Host ""
Write-Host "üåê URLs de acceso:" -ForegroundColor Yellow
Write-Host "   Web UI: http://localhost:3000" -ForegroundColor Cyan
Write-Host "   API Health: http://localhost:5000/health" -ForegroundColor Cyan

Write-Host ""
Write-Host "üîß Comandos √∫tiles:" -ForegroundColor Yellow
Write-Host "   Ver logs completos: docker compose logs -f" -ForegroundColor Gray
Write-Host "   Reiniciar servicios: docker compose restart" -ForegroundColor Gray
Write-Host "   Detener todo: docker compose down" -ForegroundColor Gray
Write-Host "   Verificar estado: .\verificar_estado.ps1" -ForegroundColor Gray




